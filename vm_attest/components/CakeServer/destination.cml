(* This structure is populated with HAMR-generated code *)
structure API =
struct

  (* Used to make FFI calls where no response from the outside world is expected *)
  val empty_byte_array = Word8Array.array 0 (Word8.fromInt 0);
  val singleton_byte_array = Word8Array.array 1 (Word8.fromInt 0);  

  (**********************************
   * begin generic API functions    *
   **********************************)

  fun logInfo s = (#(loginfo) s empty_byte_array);
  fun logDebug s = (#(logdebug) s empty_byte_array);
  fun logError s = (#(logerror) s empty_byte_array);

  fun initialise() = (#(initialise) "" empty_byte_array);

  fun wait() =
      (#(wait) "" singleton_byte_array;
       Word8Array.sub singleton_byte_array 0 <> Word8.fromInt 0);

  (**********************************
   * begin component-specific API   *
   **********************************)

  (* sb_read_port_read : in data port sb_read_port_readType; *)
  val sb_read_port_read_data_size = 4096 (* knowable from AADL type annotations *)

  (* TODO:
     we might want these buffers to be top-level declarations to prevent needless
     memory allocation *)
  fun sb_read_port_read() =
    let val buffer = Word8Array.array sb_read_port_read_data_size (Word8.fromInt 0)
    in
      #(sb_read_port_read) "" buffer;
      buffer
      (*
      Word8Array.substring buffer 0 sb_read_port_read_data_size
      *)
    end;
end;

(* This structure is populated with developer-written code *)
structure Client =
struct

  fun initialise() = (print "initializing cake server\n");

  fun attestPlat inputNonce =
    let
        val signedMsmt = Crypto.signMsg (ByteString.fromRawString ("abc"^(ByteString.toRawString inputNonce)))
    in
        let
            val _ = API.logInfo(String.concat ["plat returns: ",(ByteString.toRawString signedMsmt)])
        in
            #(sb_read_port_write) "" signedMsmt;
            ()
        end
    end

  fun timeTriggered() =
    let
        val value = API.sb_read_port_read() (* TODO: port read status flag *)
    in
        let
            val _ = API.logInfo(String.concat ["plat got: ",(Word8Array.substring value 0 4096)])
        in
            attestPlat value;
            ()
        end
    end;

  (* ===========================================================*
   * The methods below are not currently used in HAMR/Slang     *
   * ===========================================================*)

  fun activate() = ();

  fun deactivate() = ();

  fun finalise() = ();

  fun recover() = ();
end;

(* This structure is populated with HAMR-generated code *)
structure Control =
struct
  fun loop () =
      if API.wait() then
        (Client.timeTriggered();
         loop())
      else
        loop();
end;

(* Startup: client initalisation, then enter main loop *)
val _ = API.initialise();
val _ = Client.initialise();
val _ = Control.loop();

